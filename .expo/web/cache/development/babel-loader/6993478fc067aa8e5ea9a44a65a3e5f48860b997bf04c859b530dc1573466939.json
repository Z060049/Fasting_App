{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.fetchText = fetchText;\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\nvar _reactNative = require(\"react-native\");\nvar _buffer = require(\"buffer\");\nfunction fetchText(_x) {\n  return _fetchText.apply(this, arguments);\n}\nfunction _fetchText() {\n  _fetchText = (0, _asyncToGenerator2.default)(function* (uri) {\n    if (!uri) {\n      return null;\n    }\n    if (uri.startsWith('data:image/svg+xml;utf8') && _reactNative.Platform.OS === 'android') {\n      return dataUriToXml(uri);\n    } else if (uri.startsWith('data:image/svg+xml;base64')) {\n      return decodeBase64Image(uri);\n    } else {\n      return fetchUriData(uri);\n    }\n  });\n  return _fetchText.apply(this, arguments);\n}\nvar decodeBase64Image = function decodeBase64Image(uri) {\n  var decoded = decodeURIComponent(uri);\n  var splitContent = decoded.split(';')[1].split(',');\n  var dataType = splitContent[0];\n  var content = splitContent.slice(1).join(',');\n  return _buffer.Buffer.from(content, dataType).toString('utf-8');\n};\nfunction dataUriToXml(uri) {\n  try {\n    return decodeURIComponent(uri).split(',').slice(1).join(',');\n  } catch (error) {\n    throw new Error(`Decoding ${uri} failed with error: ${error}`);\n  }\n}\nfunction fetchUriData(_x2) {\n  return _fetchUriData.apply(this, arguments);\n}\nfunction _fetchUriData() {\n  _fetchUriData = (0, _asyncToGenerator2.default)(function* (uri) {\n    var response = yield fetch(uri);\n    if (response.ok || response.status === 0 && uri.startsWith('file://')) {\n      return yield response.text();\n    }\n    throw new Error(`Fetching ${uri} failed with status ${response.status}`);\n  });\n  return _fetchUriData.apply(this, arguments);\n}","map":{"version":3,"names":["_reactNative","require","_buffer","fetchText","_x","_fetchText","apply","arguments","_asyncToGenerator2","default","uri","startsWith","Platform","OS","dataUriToXml","decodeBase64Image","fetchUriData","decoded","decodeURIComponent","splitContent","split","dataType","content","slice","join","Buffer","from","toString","error","Error","_x2","_fetchUriData","response","fetch","ok","status","text"],"sources":["/Users/joeli/Desktop/Files/github/FastingApp/node_modules/react-native-svg/src/utils/fetchData.ts"],"sourcesContent":["import { Platform } from 'react-native';\nimport { Buffer } from 'buffer';\n\nexport async function fetchText(uri?: string): Promise<string | null> {\n  if (!uri) {\n    return null;\n  }\n  if (uri.startsWith('data:image/svg+xml;utf8') && Platform.OS === 'android') {\n    return dataUriToXml(uri);\n  } else if (uri.startsWith('data:image/svg+xml;base64')) {\n    return decodeBase64Image(uri);\n  } else {\n    return fetchUriData(uri);\n  }\n}\n\nconst decodeBase64Image = (uri: string) => {\n  const decoded = decodeURIComponent(uri);\n  const splitContent = decoded.split(';')[1].split(',');\n  const dataType = splitContent[0] as BufferEncoding;\n  const content = splitContent.slice(1).join(',');\n\n  return Buffer.from(content, dataType).toString('utf-8');\n};\n\nfunction dataUriToXml(uri: string): string | null {\n  try {\n    // decode and remove data:image/svg+xml;utf8, prefix\n    return decodeURIComponent(uri).split(',').slice(1).join(',');\n  } catch (error) {\n    throw new Error(`Decoding ${uri} failed with error: ${error}`);\n  }\n}\n\nasync function fetchUriData(uri: string) {\n  const response = await fetch(uri);\n  if (response.ok || (response.status === 0 && uri.startsWith('file://'))) {\n    return await response.text();\n  }\n  throw new Error(`Fetching ${uri} failed with status ${response.status}`);\n}\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAA+B,SAETE,SAASA,CAAAC,EAAA;EAAA,OAAAC,UAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAF,WAAA;EAAAA,UAAA,OAAAG,kBAAA,CAAAC,OAAA,EAAxB,WAAyBC,GAAY,EAA0B;IACpE,IAAI,CAACA,GAAG,EAAE;MACR,OAAO,IAAI;IACb;IACA,IAAIA,GAAG,CAACC,UAAU,CAAC,yBAAyB,CAAC,IAAIC,qBAAQ,CAACC,EAAE,KAAK,SAAS,EAAE;MAC1E,OAAOC,YAAY,CAACJ,GAAG,CAAC;IAC1B,CAAC,MAAM,IAAIA,GAAG,CAACC,UAAU,CAAC,2BAA2B,CAAC,EAAE;MACtD,OAAOI,iBAAiB,CAACL,GAAG,CAAC;IAC/B,CAAC,MAAM;MACL,OAAOM,YAAY,CAACN,GAAG,CAAC;IAC1B;EACF;EAAA,OAAAL,UAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAEA,IAAMQ,iBAAiB,GAAI,SAArBA,iBAAiBA,CAAIL,GAAW,EAAK;EACzC,IAAMO,OAAO,GAAGC,kBAAkB,CAACR,GAAG,CAAC;EACvC,IAAMS,YAAY,GAAGF,OAAO,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACA,KAAK,CAAC,GAAG,CAAC;EACrD,IAAMC,QAAQ,GAAGF,YAAY,CAAC,CAAC,CAAmB;EAClD,IAAMG,OAAO,GAAGH,YAAY,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAE/C,OAAOC,cAAM,CAACC,IAAI,CAACJ,OAAO,EAAED,QAAQ,CAAC,CAACM,QAAQ,CAAC,OAAO,CAAC;AACzD,CAAC;AAED,SAASb,YAAYA,CAACJ,GAAW,EAAiB;EAChD,IAAI;IAEF,OAAOQ,kBAAkB,CAACR,GAAG,CAAC,CAACU,KAAK,CAAC,GAAG,CAAC,CAACG,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC;EAC9D,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd,MAAM,IAAIC,KAAK,CAAC,YAAYnB,GAAG,uBAAuBkB,KAAK,EAAE,CAAC;EAChE;AACF;AAAA,SAEeZ,YAAYA,CAAAc,GAAA;EAAA,OAAAC,aAAA,CAAAzB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAwB,cAAA;EAAAA,aAAA,OAAAvB,kBAAA,CAAAC,OAAA,EAA3B,WAA4BC,GAAW,EAAE;IACvC,IAAMsB,QAAQ,SAASC,KAAK,CAACvB,GAAG,CAAC;IACjC,IAAIsB,QAAQ,CAACE,EAAE,IAAKF,QAAQ,CAACG,MAAM,KAAK,CAAC,IAAIzB,GAAG,CAACC,UAAU,CAAC,SAAS,CAAE,EAAE;MACvE,aAAaqB,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B;IACA,MAAM,IAAIP,KAAK,CAAC,YAAYnB,GAAG,uBAAuBsB,QAAQ,CAACG,MAAM,EAAE,CAAC;EAC1E;EAAA,OAAAJ,aAAA,CAAAzB,KAAA,OAAAC,SAAA;AAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}